
This is the default Message of the Day ($INSTPATH/etc/ircd.motd) for:

               ::

              .::  .:..:::.  .:::.   .:::.
               ::   ::'    .:'      '   '::
               ::   ::     ::       .:''.::
               ::   ::     ':.     ::    ::
              .::. .::.      ':.:'  ':..:::

a simple, Charybdis based chat daemon for UN*X.

(No, that's not a figlet font. I don't actually have figlet
installed on this computer at the moment. -- Ellenor)

The help files are inaccurate. The coder is working to fix this.

For now, +P has been moved to +r in line with Rizon's use of +z as
both "channel is registered" and "channel is permanent" - charybdis
had no "channel is registered" mode so it was overloaded on +P to
make it so that https://github.com/asterIRC/atheme-fork did what
DALNet users would think of as "set channel registered" when it
was told to set +r on channels when they were registered. The idea
is if a channel is CMODE_PERM then it will be less taxing on
Services to enforce modes.

Charybdis' +z is now +u, think "auditorium."

+D has been added (which temporarily had caused a bug where
CHFL_DELAY users (status mode not synced) were conflated with
voiced users in listings, meaning voiced users were listed
as delayed forever) to complement +u, such that +mDu results in
a modified version of Unreal's "weird +mu sending behaviour" (the
Unreal behaviour was to send from a user called "IRC", implemented
to support the horribly broken WebTV IRC client and repurposed to
be the source for messages sent in moderated auditoria. We just send
it from the user, without joining, to ops only.) Voice a user to
unhide them if you are doing +Dmu.

+L, allowing longer ban lists, has been moved to +X.

+q, quiet, has been moved to +M. This is because there are 4 new
status modes (oper business, owner, superop, halfop) and it was
decided that owner would be +q. "Oper business" may be set on any
oper by any oper regardless of whether they are a channel op or
not and should not give them channel operator access, merely
privilege of place on the nicklist.

Old Charybdis +r, registered, identified and verified users
only, has been moved to +R and has the same semantics (Services
must have given the user a services username).

No other channel modes have changed.
         
        /'\
       / . \                    WARNING!
      / /#\ \--------------------------------------------------.
     /  |#|  \  Failure to understand this section may result  |
    /   |#|   \  result in improper operation of this program. |
   /    \#/    \  While most will not understand the material  |
  /      '      \  laid hereout, it is vital that you at least |
 /      (#)      \   try to decide whether you want the capa-  |
 '---------------'  -bilities described here.                  |
           '---------------------------------------------------'

On those systems supporting SCTP (that is: most Linux other than
OpenVZ, and FreeBSD. It is unknown whether or not illumos supports
SCTP, however it's assumed that it doesn't.) this IRCd may take
advantage of SCTP as an available transport for listening. Most
IRC clients do not support SCTP; however, they exist. Other than
SCTP connections being more difficult to detect and block, SCTP
convers no advantage over TCP. This does not increase your attack
surface compared to a TCP-only IRCd. The example configuration
dictates that some ports shall be listened to on SCTP as well as
TCP. It is safe to leave these in the default position; however,
if you do not desire to do so, you may disable them. If a hub
server you are linking to leaves SCTP open, if your system is
capable of SCTP, you will still be able to connect to said hub even
if you do not listen on any SCTP ports. SCTP without SSL is no more
secure than TCP without SSL. It is recommended that you use SSL on
all server to server links and that you ensure that SSL usage is
rewarded on your IRC network. Users connecting via SCTP will gain
a usermode (+T).

TL;DR? listen::sctpport and listen::sctpsslport may either be
left in the example positions or turned off, as desired. For 99% of
IRC users, your decision will have no effect and will go unnoticed.
If you desire to manipulate them, they may be manipulated the same
way as listen::port and listen::sslport may.

           ============ END IMPORTANT BIT ============ 

The example configuration is horribly out of date. It is a carryover
from ircd-chatd, my previous project at bringing you the best in IRC.
Notably, many portions will flatly not work as described or at all.
Conversely, some portions that required undocumented modification in
chatd will work correctly in irca (oper:local_kill/oper:kill - former
works and is in the configuration, latter doesn't)

Flood_multiplier is in the pipeline. I promise.

Some extensions (m_force, m_grant) have been moved into base and are
not loaded from the configuration file but instead by default.

Other extensions (look in $INSTPATH/modules/extensions) provide extra
user-modes. Of particular interest will be umode_isabot and
whois_helpop, and most networks will want override.

Effectively operating irca requires some intimacy with the source
code - many features are undocumented or misdocumented.

There is a file, network.conf.example, in $INSTPATH/etc. ENSURE THAT
YOU DO NOT FORGET TO EDIT IT AND RENAME IT TO network.conf. It is
separated from the rest of ircd.conf because it contains settings
that are supposed to be the same all across the IRC network, regardless
of administrator preference.

Some functions are not documented in reference.conf, but are in
ircd.conf.example, which is itself horribly out of date, being a carry-
over from Charybdis 3.5.

As soon as required, it is advised that this message of the day be
modified to suit your IRC network.

Thank you for reading.

   -- Ellenor Malik, and contributors.
