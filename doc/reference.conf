/*
doc/reference.conf - irca example configuration file

Copyright (C) 2018-     Ellenor Malik

Portions copyright:
Copyright (C) 2000-2002 Hybrid Development Team
Copyright (C) 2002-2005 ircd-ratbox development team
Copyright (C) 2005-2006 charybdis development team
Copyright (C) 2017-     Ellenor Malik (as ircd-chatd)

Written by ejb, wcampbel, db, leeh and others 
*/

/* 
Important configuration notes:

The configuration is interpreted from top to bottom, unlike in IRCds that use
the colon-delimited configuration block format.

Some blocks must be listed before other types of blocks.

  class{}; must go before auth{}; and connect{}; blocks. More specific
auth{);s will be occluded if they occur after more general ones.
  privset{}; must go before oper{};.

#Shell comments are supported.
As are C comments
//And C++ comments.
*/
/* Files may be included by either:
 *        .include "filename"
 *        .include <filename>
 *
 * Times/durations are written as:
 *        12 hours 30 minutes 1 second
 *        
 * Valid units of time:
 *        month, week, day, hour, minute, second
 *
 * Valid units of size:
 *        megabyte/mbyte/mb, kilobyte/kbyte/kb, byte
 *
 * Sizes and times may be singular or plural.
 */

# Modules are now configured in network.conf.
# override.so is required for oper:netadmin modehacking to work.

# required for webirc to work.
loadmodule "extensions/m_webirc.so";

serverinfo {
  # unless otherwise stated, all directives are required.

  # serverinfo::name: our server name (e.g. parsnip.en.gb.example.net)
  # does not have to be a hostname as long as it would be valid
  # were it one
  name = "irc.pandersticks.com";

  # serverinfo::description: our description. amusingly, despite there
  # being no thing to be compatible with, '[' and ']' are forbidden
  # here. (that's a great big flashing XXX in the code)
  description = "pandering to sticks since 1949 !";

  # serverinfo::sid: our SID. This must be specified for the server to
  # start. the first character must be one of the western digits 0
  # through 9. the second and third may be western digits or latin
  # uppercase alphabeticals.
  sid = "2ZZ";

  # serverinfo::network_name network_desc:
  # our network's name and description. this may be anything, but if we
  # have an uplink to another IRC server, this is ideally the same as
  # the configuration on that.
  network_name = "Pandersticks";
  network_desc = "Pandering to sticks since God didn't exist";

  # serverinfo::hub: whether this server will permit itself to be
  # linked to more than one other server. in most cases, this can safely
  # be yes. #however#, if you have more than one uplink, you may want
  # to have this be no unless you also have servers uplinked to yours.
  # Your uplink Y:block could maybe limit the number of servers
  # connecte... and we're getting off topic.
  hub = yes;

  # serverinfo::vhost vhost6 (both optional):
  # our desired source interface for outbound connections from the
  # daemon. vhost and vhost6 must be ipv4 and ipv6 respectively.
  vhost = "192.168.0.1"; # change this, of course. Or comment it out
  # if you only have one IPv4 address.
  vhost6 = "fe80::1"; # change or comment, v6

  # serverinfo::ssl_cert ssl_private_key ssl_dh_params:
  # respectively: the certificate, the private key and the
  # Diffie Helmann parameters for the ircd.
  # DH parameters may be generated by, in the etc directory, typing:
  # openssl dhparam -out dh.pem 3072
  ssl_cert = "etc/ssl.cert";
  ssl_private_key = "etc/ssl.key";
  ssl_dh_params = "etc/dh.pem";

  # serverinfo::ssld_count:
  # number of sslds to spawn. ssld is a helper program for ircd to
  # support SSL. You need at least one.
  # Two is great, usually.
  # 2 or cpu core count-1, whichever is higher.
  ssld_count = 1;

  # serverinfo::default_max_clients:
  # the IRCd will crop this to the maximum number of sockets it
  # can legally handle. it's safe to set it sky-high.
  /* (from the original) This can be changed once ircd has started by
   * issuing:
   *   /quote set maxclients <limit>
   */
  default_max_clients = 1024;
};

admin {
  # admin::name description email (all required):
  # details about the executive of this IRC server.
  name = "Jane Smith";
  description = "Network Administrator";
  email = "<nobody@nowhere.invalid>";
};

log {
  # log::fname_*:
  # Filenames of logs. Nobody really knows what this is...
  # userlog: user connections/exits
  fname_userlog = "logs/userlog";
  # fuserlog: failed user connections
  fname_fuserlog = "logs/fuserlog";
  # operlog: /oper usage
  fname_operlog = "logs/operlog";
  # foperlog: failed /oper usage
  #fname_foperlog = "logs/foperlog";
  # serverlog: server connections/exits
  fname_serverlog = "logs/serverlog";
  # klinelog: klines, et cetera.
  #fname_klinelog = "logs/klinelog";
  # killlog: /kills
  fname_killlog = "logs/killlog";
  # operspylog: uses of operspy
  fname_operspylog = "logs/operspylog";
  # ioerrorlog: errors regarding input and output.
  #fname_ioerrorlog = "logs/ioerror";
};

# Ohhhh goodie. Y:blocks. (named class""{};)
# You can name them, number them, whatever. The name has to go between
# quotes after the word "class".
# In this file we'll be using numbered classes with letters preceding
# indicating what kind of class this is.
# U - User
# UR - User, restricted
# UO - User, recipient of extra trust
# SD - Server, we hub for
# SU - Server, hub for us
# All the number is is an indicator for, well, you can make it
# whatever.
class "U100" {
  # class[]::ping_time:
  # This specifies how long the client or server is allowed to go
  # between replying to pings from this server.
  ping_time = 2 minutes;

  # class[]::number_per_ident number_per_ip number_per_ip_global
  # number_per_cidr:
  # The number of connections per username, per IP address
  # on this server, per IP over the network, per CIDR (defined
  # later)
  number_per_ident = 5;
  number_per_ip = 10;
  number_per_ip_global = 15;
  number_per_cidr = 20;

  # class[]::cidr_ipv4_bitlen cidr_ipv6_bitlen:
  # ipv4 would do well at 32 up to 29. IPv6 can be from 128 to
  # 64 with no repercussions.
  cidr_ipv4_bitlen = 32;
  cidr_ipv6_bitlen = 64;

  # class[]::max_number: maximum class size (best to have this be
  # something like 1 for uplink server classes, and 4000 for
  # user classes)
  max_number = 3500;

  # class[]::sendq: maximum amount of data we may send to the
  # client without forcing them off the network. Helps to have
  # this quite high in most cases.
  sendq = 180kb;

  # class[]::flood_multiplier: how severely flood-restricted this user is.
  # this is now configured by integer rather than by boolean, and per class
  # and oper rather than per IRCd.
  # 16 is the default, and denotes a normal level of restriction
  # typical of that offered to users.
  # 8 allows you to flood twice as fast as a normal user (multiplies the
  # left side of the equation by 8 rather than 16, with 16 being the
  # multiplier of the right side)
  # 4 is a typical multiplier for OPERS.
  # 2 is twice as fast as no_oper_flood.
  # 0 is true no flood.
  # No-oper-flood is still configurable in the general:: section but
  # presumably has no effect. In classes and opers, true no flood
  # is flood_multiplier = 0.
  flood_multiplier = 16;
};

class "UO100" {
  # class[]::ping_time:
  # This specifies how long the client or server is allowed to go
  # between replying to pings from this server.
  # Should be shorter for opers to prevent artificial inflation
  # of active oper counts.
  ping_time = 1 minutes;

  # class[]::number_per_ident number_per_ip number_per_ip_global
  # number_per_cidr:
  # The number of connections per username, per IP address
  # on this server, per IP over the network, per CIDR (defined
  # later)
  number_per_ident = 40;
  number_per_ip = 40;
  number_per_ip_global = 80;
  number_per_cidr = 40;

  # class[]::cidr_ipv4_bitlen cidr_ipv6_bitlen:
  # ipv4 would do well at 32 up to 29. IPv6 can be from 128 to
  # 64 with no repercussions.
  cidr_ipv4_bitlen = 32;
  cidr_ipv6_bitlen = 64;

  # class[]::max_number: maximum class size (best to have this be
  # something like 1 for uplink server classes, and 4000 for
  # user classes)
  # Should be minimum twice the number of opers opered up on the
  # server at any given point.
  max_number = 120;

  # class[]::sendq: maximum amount of data we may send to the
  # client without forcing them off the network. Helps to have
  # this quite high in most cases.
  sendq = 180kb;

  # class[]::flood_multiplier: how severely flood-restricted this user is.
  # 16 is the default, and denotes a normal level of restriction
  # typical of that offered to users.
  # 8 allows you to flood twice as fast as a normal user
  # 4 is a typical multiplier for OPERS.
  # 2 is twice as fast as no_oper_flood.
  # 0 is true no flood.
  # No-oper-flood is still configurable in the general:: section but
  # presumably has no effect. In classes and opers, true no flood
  # is flood_multiplier = 0.
  flood_multiplier = 6;
};

class "SD100" {
  # class[]::ping_time:
  # This specifies how long the client or server is allowed to go
  # between replying to pings from this server.
  # Servers should have shorter ping times - drop faster if
  # they're stoned.
  ping_time = 1 minutes;

  # class[]::number_per_ident number_per_ip number_per_ip_global
  # number_per_cidr: Inapplicable.

  # class[]::cidr_ipv4_bitlen cidr_ipv6_bitlen: Inapplicable.

  # class[]::max_number: maximum class size (best to have this be
  # something like 1 for uplink server classes, and 70 for
  # downlink server classes)
  max_number = 70;

  # class[]::sendq: maximum amount of data we may send to the
  # server without forcing them off the network. Helps to have
  # this quite high in most cases.
  # Must be about 10 times the average of all unrestricted user
  # class sendqueues.
  # We hub for these people. They need a highish sendQ.
  sendq = 2 megabytes;

  # class[]::flood_multiplier: how severely flood-restricted this user is.
  # inapplicable for server classes.
};

class "SU100" {
  # class[]::ping_time:
  # This specifies how long the client or server is allowed to go
  # between replying to pings from this server.
  # Servers should have shorter ping times - drop faster if
  # they're stoned.
  ping_time = 1 minutes;

  # class[]::connectfreq:
  # This specifies how long the server will wait between outbound
  # connections in this class.
  # For uplink classes, this should be between one and fifteen
  # minutes, higher if you only have one uplink, lower if you
  # have more than one and want to be relinked ASAP.
  connectfreq = 1 minute;

  # class[]::number_per_ident number_per_ip number_per_ip_global
  # number_per_cidr: Inapplicable.

  # class[]::cidr_ipv4_bitlen cidr_ipv6_bitlen: Inapplicable.

  # class[]::max_number: maximum class size (best to have this be
  # something like 1 for uplink server classes, and 4000 for
  # user classes)
  max_number = 1;

  # class[]::sendq: maximum amount of data we may send to the
  # server without forcing them off the network. Helps to have
  # this quite high in most cases.
  # Must be about 10 times the average of all unrestricted user
  # class sendqueues.
  # These people hub for us. They need the longest, widest
  # sendq we have.
  sendq = 10 megabytes;

  # class[]::flood_multiplier: how severely flood-restricted this user is.
  # inapplicable for server classes.
};

listen {
  # listen::host (optional):
  # bind a specific host, rather than just using all of them.
  # not always desired. will be commented in this example.
  # May be IPv4 or IPv6.
  # host = "192.168.0.1";
  # host = "fe80::500";

  # listen::port sctpport sslport sctpsslport (technically
  # optional): listen on the specified port(s), over TCP or SCTP,
  # with or without SSL, on the last host specified.

  # listen::port sslport:
  # listen over TCP, without or with SSL, on the last host
  # specified.

  # listen::sctpport sctpsslport:
  # listen over SCTP, without or with SSL, on the last host
  # specified.

  # listen::port sctpport:
  # plaintext listeners. IRC over SCTP is not a new concept, but
  # is not widely supported. Not all operating systems support
  # SCTP, and no known IRC clients currently support it that were not
  # made to do so by the author. https://github.com/janicez/weechat-sctp
  # hehehe, cross promo!
  # 'port' will just listen on TCP, which you probably want.
  # Ranges are specified as number .. number. A range is treated
  # like a single number for listing's sake. Like, you only need
  # the one comma after.
  # The community default is 6667. If you can make your system
  # allow non-root binds to low ports, you can also use 194,
  # however this is not advised.
  port = 6667, 14000 .. 14005;
  sctpport = 6667;

  # listen::sslport sctpsslport:
  # TLS listeners. Community default is 6697. Assigned is 994.
  sslport = 6697, 14100 .. 14105;
  sctpsslport = 6697;
};

# We aren't even halfway through.
# Buckle up ladies, gentlemen and other such people.
# auth{}; lets users connect.
# On a public installation you will want an auth block with a user
# of "*@*".

auth {
  # auth[n]::user: ident@host mask of the user to be permitted.
  # Ideally you will use IPv4 or 6 addresses rather than DNS
  # names for these. Stackable.
  # You may use CIDR and wildcards.
  user = "*@127.0.0.0/8";
  user = "*@0::1";

  # auth[n]::password: password for this auth block.
  # may optionally be encrypted. is optional in most cases,
  # but required if you use cgiirc (we'll get to that).
  password = "areallydumbpassword";

  # auth[n]::spoof: free-form fake hostname or user@host.
  # do everyone on the network a favour and do not abuse this.
  spoof = "dumb.localhoster";

  # auth[n]::flags: flags of this auth block.
  /* from the original: Possible flags in auth:
   * 
   * encrypted            | password is encrypted with mkpasswd
   * spoof_notice         | give a notice when spoofing hosts
   * exceed_limit (old >) | allow user to exceed class user limits
   * kline_exempt (old ^) | exempt this user from klines,
   *                      + glines, and xlines.
   * dnsbl_exempt         | exempt this user from dnsbls
   * spambot_exempt       | exempt this user from spambot checks
   * shide_exempt         | exempt this user from serverhiding
   * jupe_exempt          | exempt this user from generating
   *                      + warnings joining juped channels
   * resv_exempt          | exempt this user from resvs
  * flood_exempt         | exempt this user from flood limits
  *                      | USE WITH CAUTION.
   * no_tilde     (old -) | don't prefix ~ to username if no ident
   * need_ident   (old +) | require ident for user in this class
   * need_ssl             | require SSL/TLS for user in this class
   * need_sasl            | require SASL id for user in this class
   * extend_chans         | give this user a higher channel limit.
   *                      + see general{}; and use with caution.
   */
  flags = kline_exempt, exceed_limit, extend_chans;

  # auth[n]::class: class this auth block is in.
  # you have been reading, haven't you?
  class = "UO100";
};

# auth: a cgi:irc auth block.

auth {
  # auth[n]::user: ident@host mask of the user to be permitted.
  # Ideally you will use IPv4 or 6 addresses rather than DNS
  # names for these. Stackable.
  # You may use CIDR and wildcards.
  user = "*@*.clients.kiwiirc.com";

  # auth[n]::webircname: name of webirc. sets
  # METADATA WEBIRCNAME and shows up in /WHOIS of users in this
  # auth block.
  webircname = "kiwiirc.com";

  # auth[n]::password: password for this auth block.
  # required - this is a cgiirc block.
  password = "areallydumbpassword";

  # auth[n]::spoof: free-form fake hostname or user@host.
  # do everyone on the network a favour and do not abuse this.
  # !!!: not used in cgiirc.

  # auth[n]::flags: flags of this auth block.
  /* from the original: Possible flags in auth:
   * 
   * encrypted            | password is encrypted with mkpasswd
   * spoof_notice         | give a notice when spoofing hosts
   * exceed_limit (old >) | allow user to exceed class user limits
   * kline_exempt (old ^) | exempt this user from klines,
   *                      + glines, and xlines.
   * dnsbl_exempt         | exempt this user from dnsbls
   * spambot_exempt       | exempt this user from spambot checks
   * shide_exempt         | exempt this user from serverhiding
   * jupe_exempt          | exempt this user from generating
   *                      + warnings joining juped channels
   * resv_exempt          | exempt this user from resvs
   * flood_exempt         | exempt this user from flood limits
   *                      | USE WITH CAUTION.
   * no_tilde     (old -) | don't prefix ~ to username if no ident
   * need_ident   (old +) | require ident for user in this class
   * need_ssl             | require SSL/TLS for user in this class
   * need_sasl            | require SASL id for user in this class
   * extend_chans         | give this user a higher channel limit.
   *                      + see general{}; and use with caution.
   */
  # !!!: not normally used for public access.
  flags = no_tilde;

  # auth[n]::class: class this auth block is in.
  # you have been reading, haven't you?
  class = "U100";
};

# auth: another example auth block, for public access without
# significant restriction.

# MOST GENERAL FOR LAST, YOUNG PADAWAN

auth {
  # auth[n]::user: ident@host mask of the user to be permitted.
  # Ideally you will use IPv4 or 6 addresses rather than DNS
  # names for these. Stackable.
  # You may use CIDR and wildcards.
  user = "*@*";

  # auth[n]::password: password for this auth block.
  # may optionally be encrypted. is optional in most cases,
  # but required if you use cgiirc (we'll get to that).
  # !!!: not used for public access.
  #password = "areallydumbpassword";

  # auth[n]::spoof: free-form fake hostname or user@host.
  # do everyone on the network a favour and do not abuse this.
  # !!!: not normally used for public access unless running tor
  # or something alike.
  spoof = "dumb.localhoster";

  # auth[n]::flags: flags of this auth block.
  /* from the original: Possible flags in auth:
   * 
   * encrypted            | password is encrypted with mkpasswd
   * spoof_notice         | give a notice when spoofing hosts
   * exceed_limit (old >) | allow user to exceed class user limits
   * kline_exempt (old ^) | exempt this user from klines,
   *                      + glines, and xlines.
   * dnsbl_exempt         | exempt this user from dnsbls
   * spambot_exempt       | exempt this user from spambot checks
   * shide_exempt         | exempt this user from serverhiding
   * jupe_exempt          | exempt this user from generating
   *                      + warnings joining juped channels
   * resv_exempt          | exempt this user from resvs
   * flood_exempt         | exempt this user from flood limits
   *                      | USE WITH CAUTION.
   * no_tilde     (old -) | don't prefix ~ to username if no ident
   * need_ident   (old +) | require ident for user in this class
   * need_ssl             | require SSL/TLS for user in this class
   * need_sasl            | require SASL id for user in this class
   * extend_chans         | give this user a higher channel limit.
   *                      + see general{}; and use with caution.
   */
  # !!!: not normally used for public access.
  #flags = <none>;

  # auth[n]::class: class this auth block is in.
  # you have been reading, haven't you?
  class = "U100";
};

  # auth[n]::redirserv redirport: can be used to redirect users.
  # they don't have to obey, and this is never used in today's
  # world, so is not exemplified here. redirserv is a quoted
  # string and redirport is a number.

# Anyone wanna be president of this IRC server?
# Privsets are required for oper blocks.
# And now to unleash stupidity upon your entire brain.
# (yes, they're named like classes)
privset "locop" {
  # privset[]::extends: privset to extend.
  # your lowest privset should not extend any.

  # privset[]::privs: privileges to grant.
  # this is summed with the privileges in "extends" recursively
  # to form the final privilege list.
  /* Available options:
   *
   * oper:staffer:         allows opers covered by this set to be
   *                      globally opered. Important.
   * oper:kill:            allows users to be /KILL'd by this oper
   * oper:routing:         allows remote SQUIT and CONNECT
   * oper:kline:           allows KLINE and DLINE
   * oper:unkline:         allows UNKLINE and UNDLINE
   * snomask:nick_changes: allows oper to see nickchanges via snomask +n
   * oper:rehash:          allows oper to REHASH config
   * oper:die:             allows DIE and RESTART
   * oper:admin:           gives the oper admin privileges.  admins
   *                      may (un)load modules and see various
   *                      additional information.
   * oper:hidden_admin:    gives the oper admin privileges except that they
   *                      will not have the admin lines in
   *                      whois.
   * oper:xline:           allows use of /quote xline/unxline
   * oper:resv:            allows /quote resv/unresv and cmode +LP
   * oper:operwall:        allows the oper to send/receive operwalls
   * oper:spy:             allows 'operspy' features to see through +s
   *                      channels etc. see /quote help operspy
   * oper:hidden:          hides the oper from /stats p
   * oper:remoteban:       allows remote kline etc
   * oper:mass_notice:     allows sending wallops and mass notices
   * oper:netadmin:        provides complete modehack privileges (with
   *                      override) and makes the oper immune to
   *                      non-netadmin kills.
   * oper:helpop:          Is helpop. May set +h and, if the helpop string
   *                      is defined in general::helpop, will receive a
   *                      special witticism in whois.
   */
  privs = oper:local_kill, oper:operwall;
};

privset "assistant" {
  # privset[]::extends: privset to extend.
  extends = "locop";

  # privset[]::privs: privileges to grant.
  # this is summed with the privileges in "extends" recursively
  # to form the final privilege list.
  privs = oper:staffer, oper:global_kill, oper:routing;
};

privset "assistbot" {
  # privset[]::extends: privset to extend.
  extends = "locop";

  # privset[]::privs: privileges to grant.
  # this is summed with the privileges in "extends" recursively
  # to form the final privilege list.
  privs = oper:staffer, oper:global_kill, oper:kline, oper:unkline,
          oper:remoteban, oper:resv;
};

privset "globop" {
  # privset[]::extends: privset to extend.
  extends = "locop";

  # privset[]::privs: privileges to grant.
  # this is summed with the privileges in "extends" recursively
  # to form the final privilege list.
  privs = oper:staffer, oper:global_kill, oper:kline, oper:remoteban,
          oper:routing, oper:unkline, oper:xline, oper:resv;
};

privset "staffer" {
  # privset[]::extends: privset to extend.
  extends = "globop";

  # privset[]::privs: privileges to grant.
  # this is summed with the privileges in "extends" recursively
  # to form the final privilege list.
  # modules may define their own privs (e.g. oper:abuse:chghost)
  # modules may also overload existing privileges (see general::hideidle
  # for an example)
  privs = oper:helpop, oper:abuse:chghost, oper:mass_notice, oper:override;
};

privset "admin" {
  # privset[]::extends: privset to extend.
  extends = "staffer";

  # privset[]::privs: privileges to grant.
  # this is summed with the privileges in "extends" recursively
  # to form the final privilege list.
  privs = oper:admin, oper:die, oper:rehash, oper:spy;
};

privset "netadmin" {
  # privset[]::extends: privset to extend.
  extends = "admin";

  # privset[]::privs: privileges to grant.
  # this is summed with the privileges in "extends" recursively
  # to form the final privilege list.
  privs = oper:netadmin;
};

# operator: oper blocks. This is how you get your privileges.

operator "examplenetworkadministrator" {
  # operator[]::name: the name is specified the same way a
  # class name is specified.

  # operator[]::flags: oper block flags. ~ to negate.
  # Available flags:
  # encrypted   - default on. operator[]::password is encrypted
  #               by mkpasswd.
  # need_ssl    - default off. implied on if
  #               operator[]::fingerprint is specified. require
  #               connection via SSL for this oper block to work.
  flags = need_ssl;

  # operator[]::user: ident@host mask of the oper using this
  # block. Ideally you will use IPv4 or 6 addresses rather than
  # DNS names for these. Stackable.
  # You may use CIDR, auth{}; spoofs and wildcards.
  user = "*@127.0.0.1";
  user = "*@dumb.localhoster";

  # operator[]::password: operator password. unless flag
  # encrypted is specifically negated, this will need to be
  # encrypted using $IRCD_INSTALL_PATH/mkpasswd.
  # (this one is "lazyoper")
  password = "$6$a57CqigFwAqpLkjH$S1V46twtmjnFacLSoeY9Tcbj/45khr61SPnxo69r/BnzmLsWU1V9RrWaiPvFpwxMCpYiKdzS/lywSH4J9C/dp.";

  # operator[]::rsa_public_key_file: challenge oper public key
  # file. see doc/challenge.txt for more information.
  # rsa_public_key_file = "/home/dumboper/ircd/etc/examplenetworkadministrator.pub";

  # operator[]::fingerprint: if specified, this oper block will
  # require SSL with the following client certificate fingerprint
  # and refuse opers from other fingerprints.
  # fingerprint = "<insert applicable sha1 fingerprint here>";

  # operator[]::swhois operator[]::operstring
  # if specified, this oper block will have:
  # swhois:
  #  a custom witticism in WHOIS
  # operstring:
  #  a WHOIS OPER reply that does not follow the form
  #  defined in general::default_*
  # do not define either of these unless you want them.
  # swhois will stick on deoper.
  swhois = "great scott! it's an oper!";
  operstring = "is operating the IRC server";

  # operator[]::umodes: if specified, the user modes this oper
  # will automatically be afforded upon successful oper-up.
  # if not specified, the user will be given
  # general::oper_umodes.
  /* usermodes configurable: a list of usermodes for
   * operator[]::umodes, pulled straight from the old reference.
   *
   * not all of these usermodes are oper-only.
   * +g - callerid   - Server side query blocker
   * +D - deaf       - Don't see channel messages
   * +i - invisible  - Not shown in NAMES or WHO unless you share
   *                   a channel
   * +h - helpop     - will show on /stats p, and with whois_helpop
   *                   will have a snazzy whois line defined in
   *                   general::helpopstring
   * +l - locops     - See LOCOPS messages
   * +Q - noforward  - Unaffected by channel forwarding
   * +R - regonlymsg - Server side query blocker, registered users
   *                   are exempt
   * +s - servnotice - See server notices
   * +w - wallop     - See oper and server generated WALLOPS
   * +z - operwall   - See operwalls
   */
  umodes = servnotice, wallop, operwall, locops;

  # operator[]::snomask: if specified, the server notice mask the
  # oper will automatically be afforded upon successful oper-up.
  # if not specified, the user will be given
  # general::oper_snomask.
  /* snomasks configurable:
   * +b - spambot/flood warnings
   * +c - local client connections and exits
   * +C - bot-friendly, extended local client connections & exits
   * +d - server de-bug messages
   * +f - clients refused due to limits
   * +F - (extensions/sno_farconnect.so) remote client conne/exit
   * +k - technical kill messages
   * +n - local client nick changes
   * +r - invalid idents and dumb http proxies
   * +s - generic server messages and oper kills
   * +u - unauthorised (failed) client connections
   * +x - server connections and exits
   * +y - juped channel join attempts and miscellany
   * +W - (extensions/sno_whois.so) local whois/whois seeing
   *      idle time spy
   * +Z - operspy usage
   */
  # A sane snomask combination for total information awareness
  # is exemplified below.
  snomask = "+bcfFknrsuxyZ";

  # oper[]::flood_multiplier: how severely flood-restricted this user is.
  # 16 denotes a level of restriction typical of that offered to normal
  # users.
  # 8 allows you to flood twice as fast as a normal user
  # 4 is the default, and is a typical multiplier for OPERS.
  # 2 is twice as fast as no_oper_flood.
  # 0 is true no flood.
  # No-oper-flood is still configurable in the general:: section but
  # presumably has no effect. In classes and opers, true no flood
  # is flood_multiplier = 0.
  flood_multiplier = 4;

  # operator[]::privset: privset to use.
  privset = "netadmin";
};

# connect[]::name: specified the same way oper names and classes are
# specified.

# connect["example.uplink.invalid"]: example uplink whose
# serverinfo::name is example.uplink.invalid, and we connect over SCTP
# with SSL on the SCTP+SSL client port.

connect "example.uplink.invalid" {
  # connect[]::host: specifies the IP address or DNS hostname of
  # this uplink.
  host = "192.168.0.15";

  # connect[]::vhost: specifies the IP address on our side to
  # bind to. Leave this blank to use serverinfo::vhost/vhost6
  # as applicable.
  vhost = "192.168.0.14";

  # connect[]::port: which port (in this example, 6697,
  # which the other server will be listening on) to connect to
  # the remote server on.
  port = 6697;

  # connect[]::send_password accept_password:
  # the passwords for the link. The password THEY SEND is the
  # password WE ACCEPT. The password WE SEND is the password THEY
  # ACCEPT.
  # These can safely be the same, and if you use SSL and
  # fingerprints on both ends of the link, these can safely be
  # something insecure.
  send_password = "link23456789";
  accept_password = "link23456789";

  # connect[]::fingerprint (optional - flags +ssl mandatory if
  # specified):
  # The SHA1 server certificate fingerprint of the other server.
  # if you do not specify this, the link is not authenticated!
  # you must specify this fingerprint for optimum security, otherwise
  # it's just a slightly harder to wiretap plaintext connection.
  # unlike in charybdis, it will work unauthenticated.
  #fingerprint = "";

  # connect[]::hub_mask leaf_mask:
  # The server this connect block represents is a hub to the mask
  # specified in hub_mask, and may NOT accept connections from
  # servers matching leaf_mask. (It'll be disconnected.)
  hub_mask = "*";
  #leaf_mask = "*.uk";

  # connect[]::class: connection class this server is in. This is
  # our uplink, so we'll use an SU class (see class""{}; blocks)
  class = "SU100";

  # connect[]::flags: specific flags to set on this connection
  # autoconn   - automatically trigger this connection every
  #              class[connect[this]::class]::connectfreq
  #              hours, minutes and/or seconds.
  # compressed - with ssl links, this is deprecated. if specified,
  #              if ziplinks is available, they will be activated
  #              for this connection.
  # encrypted  - with the same meaning as in auth{} and oper{} -
  #              the password WE ACCEPT is mkpasswd'ed. not really
  #              useful.
  # topicburst - enables sharing of topics upon linkage. makes the
  #              user experience more consistent between servers in the
  #              network.
  # ssl        - encrypted linking. you probably want this.
  # sctp       - link over SCTP rather than TCP. the main advantage is
  #              that it's harder to block SCTP traffic.
  flags = autoconn, topicburst, ssl, sctp;
};

# cluster: servers to propagate local actions to automatically.
# the name is a misnomer, as cluster blocks do not supply reciprocal shared
# blocks, which are required for those servers to propagate stuff back to us.

cluster {
  # cluster::name flags:
  # name (or mask of names) of servers to propagate the flags-specified
  # actions to.
  /* pulled from old: flags: list of actions to share.
   * all flags will apply to all servers named in the last name line or
   * run of names lines, similar to the listen block a few hundred lines
   * ago.
   *
   *    kline   - share perm klines
   *    tkline  - share temp klines
   *    unkline - share unklines
   *    locops  - share locops
   *    xline   - share perm xlines
   *    txline  - share temp xlines
   *    unxline - share unxlines
   *    resv    - share perm resvs
   *    tresv   - share temp resvs
   *    unresv  - share unresvs
   *    all     - share all of the above
   */
  name = "*.invalid";
  flags = all;

  name = "*.server.we.dont.want.to.jupe.on.invalid";
  flags = kline, tkline, unkline, locops, xline, txline, unxline;
  # not resv, tresv or unresv, and "all" is shorthand for all of the
  # flags.
};

# shared: opers to afford extra privileges even when they are remote to us

shared {
  # shared::oper: one value, optionally two values.
  # the first value is always the hostmask of the oper to be granted
  # extra privileges. the second value, if supplied, is the server
  # on which the oper must be logged in.
  /* flags: list of what privileges to afford remote opers.
   *
   *    kline   - allow setting perm/temp klines
   *    tkline  - allow setting temp klines
   *    unkline - allow removing klines
   *    xline   - allow setting perm/temp xlines
   *    txline  - allow setting temp xlines
   *    unxline - allow removing xlines
   *    resv    - allow setting perm/temp resvs
   *    tresv   - allow setting temp resvs
   *    unresv  - allow removing xlines
   *    all     - allow oper/server to do all of above.
   *
   *  shared-only:
   *    locops  - allow locops - only used for servers who cluster
    *    rehash  - allow rehashing
   *    dline   - allow setting perm/temp dlines
   *    tdline  - allow setting temp dlines
   *    undline - allow removing dlines
   *    none    - disallow everything
   */
  oper = "*@well.loved.oper", "very.loved.server";
  oper = "*@the.worst.pineapple", "great.chatserv";
  flags = rehash, dline, tdline, undline, kline, tkline, unkline, xline,
          unxline, txline, resv, tresv, unresv, locops;
};

# exempt: no idea why this is here. Exempt from dlines and reject cache.

exempt {
  # exempt::ip[]: ip to exempt from D:lines.
  # May be stacked.
  ip = "127.0.0.1";
  ip = "0::1";
  ip = "192.168.0.0/16";
};

.include <network.conf>

# The following two blocks are borrowed direct from the old reference.conf as
# they are still fully applicable.


/* The serverhide block contains the options regarding serverhiding */
serverhide {
  /* flatten links: this option will hide various routing information
   * and make all servers in /links appear that they are linked to
   * this server.
   */
  flatten_links = no;

  /* links delay: how long to wait before showing splits or new
   * servers in a flattened /links output.
   */
  links_delay = 5 minutes;

  /* hidden: hide this server from a /links output on servers with
   * flatten_links enabled.  this allows hub servers to be hidden etc.
   */
  hidden = no;

  /* disable hidden: prevent servers hiding themselves from a
   * /links ouput.
   */
  disable_hidden = no;
};

# I can't be bothered to rewrite the general block.
/* The general block contains many of the options that were once compiled
 * in options in config.h.  The general block is read at start time.
 */
general {
  # max chans
  max_chans_per_user = 1500;

  // Just fuck it!
  # network::max_chans_per_user:
  # The maximum number of channels a user may be on simultaneously.
  max_chans_per_user = 100;

  /* hide error messages: defines whether error messages from
   * servers that are not deemed fully safe are hidden or not.
   * These can sometimes contain IPs and can have an adverse
   * effect on server ip hiding.  Set to:
   *   yes:   hide from opers and admin
   *   opers: hide from opers only
   *   no:    do not hide error messages
   * Admins on other servers count as opers.
   */
  hide_error_messages = opers;

  /* hide spoof ips: hide the real ips of auth{} spoofed users
   * If disabled, local opers can see them.
   * Dynamic spoofs (e.g. set by services) are unaffected by this;
   * any oper (local and remote) can see the real ip.
   * Warning: for whowas, this is checked when the client exits,
   * not when the IP is shown.
   */
  hide_spoof_ips = yes;

  /* default umodes: umodes to set upon connection
   * If you have enabled the ip_cloaking_5 extension, and you wish for
   * incoming clients to be set +x upon connection, add +x to the umode
   * string below.
   */
  default_umodes = "+i";

  /* default operstring: defines the default oper response
   * in /whois queries, eg "is an IRC Operator".
   * After startup use /quote set operstring to change.
   */
  default_operstring = "is an IRC Operator";

  /* default adminstring: defines the default admin response
   * in /whois queries, eg "is a Server Administrator".
   * After startup use /quote set adminstring to change.
   */
  default_adminstring = "is a Server Administrator";

  # general::default_netadminstring
  # new in ircd-chatd. used for oper:netadmin opers.
  default_netadminstring = "is an IRC Network Administrator";

  # general::helpopstring
  # new in ircd-chatd. used to add a whois line to helpop opers.
  # leave empty to disable
  # the following is the unreal default.
  helpopstring = "is available for help.";

  # general::helpop_unreal_loc
  # whether helpop shows up high in the whois or low.
  # requires a high-whois aware whois.
  helpop_unreal_loc = yes;

  # general::hideidle_requires_oper hideidle_requires_privilege
  # if you have hideidle.so loaded, you may configure it here.
  # hideidle_requires_oper = yes/no - if yes, requires oper and privilege
  # configured in hideidle_requires_privilege in privset.

  # this could be oper:helpop for all we care!
  hideidle_requires_privilege = "oper:hideidle";

  # but if this is a no, you don't need the privilege.
  hideidle_requires_oper = no; 

  /* servicestring: defines the response for opered services (+S)
   * in /whois queries, eg "is a Network Service".
   * This is updated on rehash.
   */
  servicestring = "is a Network Service";

  /* disable fake channels: disable local users joining fake versions
   * of channels, eg #foo^B^B.  Disables bold, mirc colour, reverse,
   * underline and hard space.  (ASCII 2, 3, 22, 31, 160 respectively).
   */
  disable_fake_channels = no;

  /* tkline_expire_notices: give a notice to opers when a tkline
  * expires
  */
  tkline_expire_notices = no;

  /* floodcount: the default value of floodcount that is configurable
   * via /quote set floodcount.  This is the amount of lines a user
   * may send to any other user/channel in one second.
   */
  default_floodcount = 10;

  /* failed oper notice: send a notice to all opers on the server when 
   * someone tries to OPER and uses the wrong password, host or ident.
   */
  failed_oper_notice = yes;

  /* dots in ident: the amount of '.' characters permitted in an ident
   * reply before the user is rejected.
   */
  dots_in_ident=2;

  /* min nonwildcard: the minimum non wildcard characters in k/d/g lines
   * placed via the server.  klines hand placed are exempt from limits.
   * wildcard chars: '.' '*' '?' '@'
   */
  min_nonwildcard = 4;

  /* min nonwildcard simple: the minimum non wildcard characters in
   * xlines/resvs placed via the server.
   * wildcard chars: '*' '?'
   */
  min_nonwildcard_simple = 3;

  /* max accept: maximum allowed /accept's for +g usermode */
  max_accept = 20;

  /* max monitor: the maximum amount of nicknames a client may have in
   * their monitor (server-side notify) list.
   */
  max_monitor = 100;

  /* nick flood: enable the nickflood control code */
  anti_nick_flood = yes;

  /* nick flood: the nick changes allowed in the specified period */
  max_nick_time = 20 seconds;
  max_nick_changes = 5;

  /* anti spam time: the minimum time a user must be connected before
   * custom quit messages are allowed.
   */
  anti_spam_exit_message_time = 5 minutes;

  /* ts delta: the time delta allowed between server clocks before
   * a warning is given, or before the link is dropped.  all servers
   * should run ntpdate/rdate to keep clocks in sync
   */
  ts_warn_delta = 30 seconds;
  ts_max_delta = 5 minutes;

  /* client exit: prepend a users quit message with "Client exit: " */
  client_exit = yes;

  /* collision fnc: change user's nick to their UID instead of
   * killing them, if possible. This setting only applies to nick
   * collisions detected on this server. Only enable this if
   * all servers on the network allow remote nicks to start with
   * a digit.
   */
  collision_fnc = yes;

  /* global snotices: send out certain snotices (most +b, +f, +y,
   * some +s) to other servers via ENCAP SNOTE. Received SNOTEs are
   * displayed unconditionally.
   */
  global_snotices = yes;
  
  /* dline reason: show the user the dline reason when they connect 
   * and are dlined.
   */
  dline_with_reason = yes;
  
  /* kline delay: delay the checking of klines until a specified time.
   * Useful if large kline lists are applied often to prevent the
   * server eating CPU.
   */
  kline_delay = 0 seconds;

  /* kline reason: show the user the reason why they are k/dlined 
   * on exit.  may give away who set k/dline when set via tcm.
   */
  kline_with_reason = yes;

  /* kline reason: make the users quit message on channels this
   * reason instead of the oper's reason.
   *
   * You may want to change this or comment this out.
   */
  #kline_reason = "K/G/X-Lined";

  /* identify to services via server password
   * if auth{} block had no password but the user specified a
   * server password anyway, send a PRIVMSG to <identify_service>
   * with as text <identify_command> <password>.
   * You will need to change this to fit with your network's services
   * server name.
   */
  identify_service = "NickServ@services.int";
  identify_command = "IDENTIFY";

  /* non redundant klines: flag and ignore redundant klines */
  non_redundant_klines = yes;

  /* warn no nline: warn opers about servers that try to connect but
   * we dont have a connect {} block for.  Twits with misconfigured 
   * servers can get really annoying with this enabled.
   */
  warn_no_nline = yes;

  /* use propagated bans: KLINE, XLINE and RESV set fully propagated bans.
   * That means the bans are part of the netburst and restarted/split
   * servers will get them, but they will not apply to 3.2 and older
   * servers at all.
   */
  use_propagated_bans = yes;

  /* stats e disabled: disable stats e.  useful if server ips are
   * exempted and you dont want them listing on irc.
   */
  stats_e_disabled = no;

  /* stats c oper only: make stats c (connect {}) oper only */
  stats_c_oper_only=no;

  /* stats h oper only: make stats h (hub_mask/leaf_mask) oper only */
  stats_h_oper_only=no;

  /* stats y oper only: make stats y (class {}) oper only */
  stats_y_oper_only=no;

  /* stats o oper only: make stats o (opers) oper only */
  stats_o_oper_only=yes;

  /* stats P oper only: make stats P (ports) oper only
   * NOTE: users doing stats P will never be given the ips that the 
   * server listens on, simply the ports.
   */
  stats_P_oper_only=no;

  /* stats i oper only: make stats i (auth {}) oper only. set to:
   *     yes:    show users no auth blocks, made oper only.
   *     masked: show users first matching auth block
   *     no:     show users all auth blocks.
   */
  stats_i_oper_only=masked;

  /* stats k/K oper only: make stats k/K (klines) oper only.  set to:
   *     yes:    show users no auth blocks, made oper only
   *     masked: show users first matching auth block
   *     no:     show users all auth blocks.
   */
  stats_k_oper_only=masked;

  /* map oper only: make /map oper only */
  map_oper_only = no;

  /* operspy admin only: make operspy notices to +Z admin only */
  operspy_admin_only = no;

  /* operspy dont care user info: treat /who mask as if there was
   * an '!' always; do not log or server notice about operspy
   * /who mask, /masktrace and /scan. channel information is still
   * protected. */
  operspy_dont_care_user_info = no;

  /* caller id wait: time between notifying a +g user that somebody
   * is messaging them.
   */
  caller_id_wait = 1 minute;

  /* pace wait simple: time between use of less intensive commands
   * (HELP, remote WHOIS, WHOWAS)
   */
  pace_wait_simple = 1 second;

  /* pace wait: time between more intensive commands
   * (ADMIN, INFO, LIST, LUSERS, MOTD, STATS, VERSION)
   */
  pace_wait = 10 seconds;

  /* short motd: send clients a notice telling them to read the motd
   * instead of forcing a motd to clients who may simply ignore it.
   */
  short_motd = no;

  /* ping cookies: require clients to respond exactly to a ping command,
   * can help block certain types of drones and FTP PASV mode spoofing.
   */
  ping_cookie = no;

  /* connect timeout: sets how long we should wait for a connection
   * request to succeed
   */
  connect_timeout = 30 seconds;

  /* ident timeout: Amount of time (in seconds) that the IRCd will
   * wait for a user to respond to an ident request.
   */
  default_ident_timeout = 5;

  /* disable auth: disables identd checking */
  disable_auth = no;

  /* no oper flood: increase flood limits for opers. */
  no_oper_flood = yes;

  /* Comment the following line out once you consent to this configuration
   * starting.
   */
  havent_read_conf = yes;
  
  /* max targets: the maximum amount of targets in a single 
   * PRIVMSG/NOTICE.  set to 999 for practically unlimited - 0
   * means no targets.
   */
  max_targets = 4;

  /* post-registration delay: wait this long before processing commands from a newly
   * registered user. Used to allow network utility bots to perform any actions
   * (such as host changes or proxy scanning) before the user can join channels.
   */
  post_registration_delay = 2 seconds;

  /* use_whois_actually: send clients requesting a whois a numeric
  * giving the real IP of non-spoofed clients to prevent DNS abuse.
  */
  use_whois_actually = yes;

  /* usermodes configurable: a list of usermodes for the options below
   *
   * +g - callerid   - Server Side Ignore
   * +D - deaf       - Don't see channel messages
   * +i - invisible  - Not shown in NAMES or WHO unless you share a 
   *                   a channel
   * +h - helpop     - will show on /stats p, and with whois_helpop
   *                   will have a snazzy whois line defined in
   *                   general::helpopstring
   * +l - locops     - See LOCOPS messages
   * +Q - noforward  - Unaffected by channel forwarding
   * +R - regonlymsg - No messages from unindentified
   * +s - servnotice - See server notices
   * +w - wallop     - See oper and server generated WALLOPS
   * +z - operwall   - See operwalls
   *
   * snomasks configurable:
   * +b - spambot/flood warnings
   * +c - local client connections and exits
   * +C - bot-friendly, extended local client connections & exits
   * +d - server de-bug messages
   * +f - clients refused due to limits
   * +F - (extensions/sno_farconnect.so) remote client conne/exit
   * +k - technical kill messages
   * +n - local client nick changes
   * +r - invalid idents and dumb http proxies
   * +s - generic server messages and oper kills
   * +u - unauthorised (failed) client connections
   * +x - server connections and exits
   * +y - juped channel join attempts and miscellany
   * +W - (extensions/sno_whois.so) local whois/whois seeing
   *      idle time spy
   * +Z - operspy usage
   */

  /* oper only umodes: usermodes only opers may set */
  oper_only_umodes = operwall, locops, servnotice;

  /* oper umodes: default usermodes opers get when they /oper */
  oper_umodes = locops, servnotice, operwall, wallop;

  /* oper snomask: default snomask opers get when they /oper,
   * provided they have umode +s set */
  oper_snomask = "+s";

  /* use egd: if your system does not have *random devices yet you
   * want to use OpenSSL and encrypted links, enable this.  Beware -
   * EGD is *very* CPU intensive when gathering data for its pool
   */
  #use_egd = yes;

  /* egdpool path: path to EGD pool. Not necessary for OpenSSL >= 0.9.7
   * which automatically finds the path.
   */
  #egdpool_path = "/var/run/egd-pool";


  /* compression level: level of compression for compressed links between
   * servers.  
   *
   * values are between: 1 (least compression, fastest)
   *                and: 9 (most compression, slowest).
   */
  #compression_level = 6;

  /* burst_away: This enables bursting away messages to servers.
  * With this disabled, we will only propogate AWAY messages
  * as users send them, but never burst them.  Be warned though
  * enabling this could increase the size of a burst significantly
  * for a large network.
  */
  burst_away = yes;

  /* nick delay: This locks nicks of split clients for the given time
   * or until a remote client uses the nick. This significantly
   * reduces nick collisions on short splits but it can be annoying.
   * To make things as fair as possible, this should be the same on
   * all servers. If you enable this, the suggested value is 15 minutes.
   */
  nick_delay = 0 seconds;

  /* reject time: the amount of rejections through klines/dlines etc
   * allowed in the given time before the rejection is cached and
   * a pseudo temp dline is placed
   */
  reject_ban_time = 1 minute;
  reject_after_count = 3;

  /* reject duration: the amount of time to cache the rejection */
  reject_duration = 5 minutes;

  /* throttle_duration: Amount of time that throttling will be applied to an IP
   * address.
   */
  throttle_duration = 60;

  /* throttle_count: Number of connections within throttle_duration that it takes
   * for throttling to take effect */
  throttle_count = 4;

  /*
   * hide_opers: When set, only opers can see whether someone else is
   * opered.
   *
   * in ircd-chatd, this is not "yes" in the reference conf because
   * this is more of an unrealish ircd. lol
   */
  hide_opers = no;

  /*
   * expire_override_time: User mode +p will be automatically unset
   * this long after it is set. 0 disables this. Default is 5 minutes.
   */
  expire_override_time = 5 minutes;

  /* client flood_max_lines: maximum number of lines in a clients queue before
   * they are dropped for flooding.
   */
  client_flood_max_lines = 20;

  /* Flood control settings. DO NOT CHANGE THESE without extensive discussion
   * and testing by someone who knows exactly what they do.
   *
   * These settings replicate ircd-seven-1.0 behaviour.
   */
  client_flood_burst_rate = 40;
  client_flood_burst_max = 5;
  client_flood_message_time = 1;
  client_flood_message_num = 2;
};

modules {
  /* module path: paths to search for modules specified below and 
   * in /modload.
   */
  # This should be your install dir.
  path = "modules";
  path = "modules/autoload";

  /* module: the name of a module to load on startup/rehash */
  #module = "some_module.so";
};
