/* part of irca
 * network.conf.example - example network.conf
 * include from your ircd.conf instead of giving the contents there for optimum
 * administrability */

# network: options that should be set the same way network-wide.
# It is important you get this right!
# Failure to do so will result in some functions of the IRCd working
# improperly.


# Extensions
/* irca has a number of extensions that are not enabled by default
 * (but really should be). They're listed below, with suggested ones uncommented
 *
 * Emulates channel mode +-O (oper only) (+-iI $o)   -- chm_operonly_compat.so
 * Emulates channel mode +-U (quiet unreg) (+-M $~a) -- chm_quietunreg_compat.so
 * Emulates channel mode +-S (ssl only) (+-b $~z)    -- chm_sslonly_compat.so

 * Not recommended for normal networks:
 * Restrict channel creation to logged in users      -- createauthonly.so

 * Extbans:
 * Account bans (+b $a[:mask])                       -- extb_account.so
 * Banned from another channel (+b $j:mask)          -- extb_canjoin.so
 * Other-channel bans (+b $c:mask)                   -- extb_channel.so
 * Extended ban (+b $x:mask)                         -- extb_extgecos.so
 * Oper bans (+b $o)                                 -- extb_oper.so
 * Realname (gecos) bans (+b $r:mask)                -- extb_realname.so
 * Server bans (+b $s:mask)                          -- extb_server.so
 * SSL bans, with fingerprint (+b $z[:fingerprint])  -- extb_ssl_fp.so
 * WebIRC user bans (+b $w[:WEBIRCNAME])             -- extb_webircname.so
 * Normal bans as an extban (+b $m:hostmask)         -- extb_hostmask.so
 * All-of-above bans (+b $&:w,m:*!*@*.aol.com bans AOL webbies)    AND
 * Any-of-above bans (+b $|:w,z bans SSL & webbies)  -- extb_combi.so

 * Useful utilities:
 * Unrealish host-mangling (umode +x, configurable)  -- ip_cloaking_5.so
 *
 * Find channel forwards                             -- m_findforwards.so
 * /identify support                                 -- m_identify.so
 * forcejoin and svsjoin support                     -- m_force.so
 * Far connection notices (snomask +F)               -- sno_farconnect.so
 * Remote k/d/x line active notices                  -- sno_globalkline.so
 * Remote oper up notices                            -- sno_globaloper.so
 * /whois notifications (snomask +W)                 -- sno_whois.so
 * Oper-override (modehacking)                       -- override.so
 *
 * Deprecated:
 * SSL bans (+b $z)                                  -- extb_ssl.so
 * Channel mode +-A (admin only)                     -- chm_adminonly.so
 * Channel mode +-O (oper only)                      -- chm_operonly.so
 * Channel mode +-S (ssl only)                       -- chm_sslonly.so
 */
loadmodule "extensions/chm_operonly_compat.so";
loadmodule "extensions/chm_quietunreg_compat.so";
loadmodule "extensions/chm_sslonly_compat.so";
#loadmodule "extensions/createauthonly.so";
loadmodule "m_metadata.so";
loadmodule "extensions/extb_account.so";
loadmodule "extensions/extb_canjoin.so";
loadmodule "extensions/extb_channel.so";
loadmodule "extensions/extb_dnsbl.so";
loadmodule "extensions/extb_extgecos.so";
loadmodule "extensions/extb_oper.so";
loadmodule "extensions/extb_realname.so";
loadmodule "extensions/extb_server.so";
loadmodule "extensions/extb_ssl_fp.so";
loadmodule "extensions/extb_sctp.so";
loadmodule "extensions/extb_webircname.so";
loadmodule "extensions/extb_hostmask.so";
loadmodule "extensions/m_force.so";
loadmodule "extensions/extb_combi.so";

loadmodule "extensions/hurt.so";
loadmodule "extensions/ip_cloaking_5.so";

cloaking {
  # it really doesn't matter if this gets out. it's not an effective
  # hide of host anyway
  secretsalt = "SuperSecretSaltyFood";
  prefix = "Umbrellix-";
};

#loadmodule "extensions/ip_cloaking.so";
loadmodule "extensions/m_findforwards.so";
loadmodule "extensions/m_mkpasswd.so";
loadmodule "extensions/m_webirc.so";
loadmodule "extensions/m_identify.so";
#loadmodule "extensions/no_oper_invis.so";
loadmodule "extensions/sno_farconnect.so";
loadmodule "extensions/sno_globalkline.so";
loadmodule "extensions/sno_globaloper.so";
loadmodule "extensions/sno_whois.so";
loadmodule "extensions/override.so";

# hideidle hides idle. hidecfp hides certfp.
loadmodule "extensions/umode_sslonlymsg.so";
loadmodule "extensions/umode_comchanonlymsg.so";
loadmodule "extensions/no_kill_services.so";
loadmodule "extensions/umode_showonlycomchans.so";

channelhiding {
  # does +I need oper?
  hide_operonly = no;
  # if so, which privilege?
  hide_privilege = "oper:hidechannels";

  # does +P need oper?
  override_operonly = yes;
  # if so, which privilege?
  override_privilege = "oper:spy";
};

# the following extension is required for helpop see general::helpopstring
loadmodule "extensions/whois_helpop.so";

# "is a bot" support for ircd-chatd
# configuration will be in the network.ini
loadmodule "extensions/umode_isabot.so";

botmode {
  # botmode::botstring - add this to the whois
  botstring = "is a robotic client (or has one attached to their BNC)";

  high_loc = yes;
};


network {
  # network::autochanmodes modelessmodes:
  # These control automatic configuration of channels upon their
  # creation.
  # This is network administrator personal preference, and it is
  # recommended you do not make this differ between servers.
  # The default automodes forbid CTCPs and non-op topic changes.
  # The default modeless channel modes forbid outside messages only.
  autochanmodes = "CTnt";
  modelessmodes = "n";

  # splitcode.
  # network::default_split_user_count default_split_server_count:
  # these options may be used to define the minimum number of users
  # and servers that may be on the network at once before the server
  # enters net-split damage control mode.
  # on most networks with services, this can safely be zero for both.
  default_split_user_count = 0;
  default_split_server_count = 0;

  # network::no_create_on_split no_join_on_split:
  # netsplit damage control.
  # no_create_on_split: forbid our users from creating channels for the
  # duration of the split.
  # no_join_on_split: forbid our users from joining channels at all for
  # the duration of the split.
  # on most networks with or without services, these should both be "no".
  no_create_on_split = no;
  no_join_on_split = no;

  # network::kick_on_split_riding:
  # netsplit damage control 2: electric not-with-services-a-loo.
  # if a channel on this server is burst from a different server
  # with +i where we don't have +i or with a different +k to ours or
  # with any +k if we don't have one, kick all users on our side.
  # on most networks with services, this should usually be "no".
  kick_on_split_riding = no;

  # network::modes_disabled_for_halfops:
  # It's recommended this is empty. Halfops cannot use any of these modes.
  # Adding 'h' means that halfops are unable to make others halfops.
  # Adding "beIM" would mean that halfops could not ban, exempt, invite or
  # mute. for a short discussion of the matter, see src/chmode.c ^F chm_halfop
  # additionally, adding h here will forbid halfops from kicking other halfops.
  # this should be sane behaviour.
  modes_disabled_for_halfops = "h";

  # network::global_chantypes local_chantypes modeless_chantypes:
  # Channel types that are considered local, global and modeless, respectively.
  # It's recommended this be something sensical. (global must have #, local &)
  # If you want modeless global channels you have + be a global type and a
  # modeless type. (new in irca)
  # A modeless local channel could be prefixed minus - this is, after all,
  # invalid to start a nickname.
  # If you want numbered channels (well, channels that can begin with numerals;
  # the numberedness of them will not be enforced like on chatd) put
  # 1234567890 in global_chantypes. Alternatively, you may have it so that
  # even start numbers are global and odd are local, and 3, 6 and 9 are
  # modeless.
  # a modeless_chantype must also be a global or local chantype.
  # On a modeless channel, if an oper is feeling frisky, the channel could
  # become modeful.
  # WHATEVER YOU DO... Don't. Put. Letters. Here.
  global_chantypes = "#+\"24680";
  local_chantypes = "&'-13579";
  modeless_chantypes = "+-369";

  # network::prefix_operbiz prefix_owner prefix_admin prefix_halfop:
  # These control how prefixes appear.
  # It IS supported to use & as your admin (or any) prefix, but then you
  # should rid yourself of localchannels.
  # The following simulates the exact setup found on unmodified Unreal
  # IRCd. It requires disabling local channels. Therefore, an alternative
  # admin prefix is commented below it.
  prefix_operbiz = "*";
  prefix_master = "~";
  prefix_admin = "&";
  #prefix_admin = "!";
  prefix_halfop = "%";

  # Prefix setups like the following (all commented) are absolutely not
  # uncommon on other IRCds.
  /*

  # UltimateIRCd
  prefix_operbiz = "";
  prefix_owner = "";
  prefix_admin = "!";
  prefix_halfop = "%";

  # Unknown, but possible on InspIRCd if you try hard enough
  prefix_operbiz = "";
  prefix_owner = ".";
  prefix_admin = "&";
  prefix_halfop = "%";

  # ElementalIRCd
  prefix_operbiz = "";
  prefix_owner = "~";
  prefix_admin = "!";
  prefix_halfop = "%";

  # Augmented ElementalIRCd configuration used on irc.umbrellix.net,
  # the home of irca (hit us up if you have any problems: #coder-com)
  prefix_operbiz = "*";
  prefix_owner = "~";
  prefix_admin = "!";
  prefix_halfop = "%";

  */

  # network::use_invex use_except use_knock disable_local_channels
  # We'll blast through these quickly for you.
  # use_quiet = yes. enables +M.
  use_quiet = yes;

  # Invex (use_invex = yes; ) (+I) is a way to set an invite on a
  # hostmask in an otherwise invite-only channel.
  use_invex = yes;

  # Except (use_except = yes; ) (+e) is a way to allow otherwise banned
  # users to use the channel.
  use_except = yes;
  # Knock (use_knock = yes; ) (/KNOCK <channel>) is a mechanism by which
  # users who are not banned from a channel that is not set +p may ask
  # for an invite to a channel that is somehow locked.
  use_knock = yes;
  # disable_local_channels, if set to yes, will disable channels whose
  # name begins with &. These channels are not propagated over the
  # network. This can safely be inconsistent on the network. "Required"
  # (will result in funky client behaviour when not used) if any of your
  # network::prefix_* settings are "&".
  #disable_local_channels = yes;
  disable_local_channels = no; #comment the above and uncomment this if
    # you do not use a "&" prefix.

  # network::knock_delay knock_delay_channel:
  # How long between knocks to a channel per user per channel, and per
  # channel irrespective of user, respectively.
  knock_delay = 4 minutes 30 seconds;
  knock_delay_channel = 30 seconds;

  # network::max_bans max_bans_large:
  # The maximum number of entries to the ban, exempt, invite and quiet
  # lists a normal, and extended lists (+L) channel may have,
  # respectively.
  max_bans = 100;
  max_bans_large = 500;

  # network::burst_topicwho:
  # netsplit recovery. when running topicburst (see connect::flags), this
  # option controls whether we send who set the topic as well as the
  # topic itself. should usually be yes.
  burst_topicwho = yes;

  # network::only_ascii_channels:
  # if this is set to yes, only channels whose names are fully ASCII
  # printable may be created or joined on this server. if you are running
  # a multilingual network (and this is very easy to do with chatd as
  # chatd supports full Unicode nicknames - so you can have a Russian
  # nick) this is highly inadvisable (what, are you gonna expect everyone
  # to just use numberchannels?)
  only_ascii_channels = no;

  # network::resv_forcepart: force-part local users of a channel that has
  # been the subject of an active /RESV.
  resv_forcepart = yes;

  # network::channel_target_change: activate target change protection,
  # limiting how many channels users may message in one go.
  # IRCops and users of privilege in the messaged channels are exempt.
  channel_target_change = yes;

  helpopstring = "is available for help.";
  helpop_unreal_loc = yes;
  
};

# blacklist: should also be roughly the same network-wide.
/* These are the blacklist settings.
 * You can have multiple combinations of host and rejection reasons.
 * They are used in pairs of one host/rejection reason.
 *
 * These settings should be adequate for most networks.
 *
 * Word to the wise: Do not use blacklists like SPEWS for blocking IRC
 * connections.
 *
 * As of charybdis 2.2, you can do some keyword substitution on the rejection
 * reason. The available keyword substitutions are:
 *
 *   ${ip}           - the user's IP
 *   ${host}         - the user's canonical hostname
 *   ${dnsbl-host}   - the dnsbl hostname the lookup was done against
 *   ${nick}         - the user's nickname
 *   ${network-name} - the name of the network
 *
 * added in irca: this block will also now contain an example of using Tor
 * Project's DNSEL to block users (or direct them to use your hidden service
 * if you have one), using the IP 1.2.3.4 as an example. substitute your own
 * ipv4 bindhost, and use all port numbers you listen on TCP using, rather than
 * just 6667.
 *
 * also included is an example of using dronebl.
 */
blacklist {
  host = "6667.4.3.2.1.ip-port.exitlist.torproject.org";
  mark = "tordnsel";
  reason = "${nick}, you're using Tor. On ${network-name}, Tor usage is only permitted via hidden service: nonexistent.onion.";

  host = "dnsbl.dronebl.org";
  mark = "dronebl";
  matches "127.0.0.2", "127.0.0.3"; // etc
  # Shamelessly ripped from http://www.dronebl.org/docs/howtouse
  reason = "${nick}, you have a host listed in the DroneBL. For more information, visit http://dronebl.org/lookup?ip=${ip}";

  host "dnsbl.dronebl.org";
  mark "dronebl-t4";
  type both; // ipv4? ipv6? both?
  matches "127.0.0.4";
  reject 0;
  reason "${nick}, some channels may restrict your access because you have a Type 4 listing in DroneBL. For more information, visit http://dronebl.org/lookup?ip=${ip}";

  host = "rbl.efnetrbl.org";
  mark = "efnet-rbl";
  reason = "${nick}, your IP (${ip}) is listed in EFnet's RBL. For assistance, see http://efnetrbl.org/?i=${ip}";
};

# The following eight blocks are also taken directly from the reference config
# as they are autodidactic in nature (they describe server side services alii).
# These should be the same on all servers, for obvious reasons.

alias "NickServ" {
  /* the name must go above */

  /* target: the target nick (must be a network service) or
   * user@server (cannot be this server, only opers can use
   * user starting with "opers" reliably, interpreted on the target
   * server only so you may need to use nick@server instead)
   */
  target = "NickServ";
};

alias "ChanServ" {
  target = "ChanServ";
};

alias "OperServ" {
  target = "OperServ";
};

alias "MemoServ" {
  target = "MemoServ";
};

alias "NS" {
  target = "NickServ";
};

alias "CS" {
  target = "ChanServ";
};

alias "OS" {
  target = "OperServ";
};

alias "MS" {
  target = "MemoServ";
};

# if your network has hostserv, speak of it too.
alias "HS" {
  target = "HostServ";
};

alias "HostServ" {
  target = "HostServ";
};

alias "CSHelp" {
  target = "ChanServ";
  # new in ircd-chatd and irca:
  # alias[]::prefix: text to prepend to user's text sent to service or
  # user@server. Here, /cshelp is an alias to /msg chanserv help (followed
  # by a space for obvious reasons, i.e. /cshelp register = /cs help register
  # not /cs helpregister)
  # (reminds author, she needs to implement a pseudo-SQUERY command that
  # only sends the message if the target is a service)
  prefix = "HELP";
};

# service: should be the same network wide for obvious reasons.

service {
  # service::name[]: there may only be one service block.
  # you may stack services server names, however.
  # allows special privileges to the server.
  # normal servers must not be afforded these privileges.
  name = "services.invalid";
  name = "tclserv.invalid";
  name = "none.invalid";
};
